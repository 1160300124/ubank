<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace：必须与对应的接口全类名一致
	id:必须与对应接口的某个对应的方法名一致
	
 -->
<mapper namespace="com.ulaiber.web.dao.BankDao">

    <resultMap id="BankMap" type="Bank" >
    	<id column="bankNo" property="bankNo" jdbcType="VARCHAR" />
    	<result column="bankName" property="bankName" jdbcType="VARCHAR" />
   </resultMap>

	 <!-- mybsits_config中配置的alias类别名,也可直接配置resultType为类路劲 -->
	<select id="getBankByBankNo" parameterType="String" resultMap="BankMap">
		select bankNo,name as bankName,type,number from tbl_bindBank where bankNo=#{bankNo}
	</select>

	<select id="getAllBanks" resultMap="BankMap">
		select * from tbl_banks
	</select>

	<!--根据公司编号删除银行账户信息表中的数据-->
	<delete id="deleteComByNum" parameterType="String">
		DELETE FROM tbl_bankAccount where companyNumber = #{comNum}
	</delete>

	<!--根据公司编号删除银行账户信息表中的数据-->
	<delete id="deleteCompanyByNum" parameterType="String">
		DELETE FROM tbl_bankAccount where companyNumber in
		<foreach collection="array" item="idsArr" open="(" separator="," close=")">
			#{idsArr}
		</foreach>
	</delete>

	<!--获取公司绑定的银行信息-->
	<select id="getBankByCode" parameterType="String" resultType="com.ulaiber.web.model.BankAccount" >
		select distinct b.bankNumber from tbl_company a left join tbl_bankAccount b on a.companyNumber = b.companyNumber
			where a.code = #{code}
	</select>

	<!--根据银行编号获取银行信息-->
	<select id="queryBanksByNumber" parameterType="String" resultType="com.ulaiber.web.model.Bank">
		select b.bankNo,a.type,b.name as bankName from tbl_banks a
		inner join tbl_bindBank b on a.type = b.type
			where a.bankNo = #{bankNumber}
	</select>

	<!--删除原绑定银行卡-->
	<update id="deleteOriginCart" parameterType="Map">
		UPDATE tbl_userToBank SET disabled = 1 where userid = #{userid} and bankCardNo = #{originCart}
	</update>

	<!--根据二类户账号ID和银行卡号查询二类户信息-->
	<select id="querySecondAccount" parameterType="Map" resultType="com.ulaiber.web.model.ShangHaiAcount.SecondAcount">
		select a.*,b.cardNo as IdNo,b.reserve_mobile as ReservedPhone,c.bankCardNo as BindCardNo,c.bankNo from tbl_secondAccount a
		left join tbl_users b on a.userid = b.user_id
		left join tbl_userToBank c on a.userid = c.userid
		where c.disabled = 0 and  a.SubAcctNo = #{SubAcctNo}
	</select>

	<!--根据用户ID获取对应公司的邀请码-->
	<select id="getCodeByuserid" parameterType="Long" resultType="String" >
		select distinct b.code from tbl_roots a
		left join tbl_company b on a.companyNumber = b.companyNumber
		 where a.userid = #{userid}
	</select>

	<!--更新二类账户余额-->
	<update id="updateSecondAcc" parameterType="com.ulaiber.web.model.ShangHaiAcount.SecondAcount" >
		update tbl_secondAccount set EarningsYesterday = #{EarningsYesterday} , AvaiBal = #{AvaiBal},AvaiFundShare = #{AvaiFundShare} , FundShare = #{FundShare},
				WorkingBal = #{WorkingBal} where SubAcctNo = #{subAcctNo}
	</update>

	<!--根据二类账户号查询账户余额-->
	<select id="queryAccount" parameterType="String" resultType="com.ulaiber.web.model.ShangHaiAcount.SecondAcount">
		select * FROM tbl_secondAccount WHERE SubAcctNo =#{subAcctNo}
	</select>

	<!--新增提现记录-->
	<insert id="insertWithdraw" parameterType="com.ulaiber.web.model.ShangHaiAcount.Withdraw">
		INSERT INTO tbl_withdraw(userid,SubAcctNo,RqUID,BindCardNo,Amount,BizDate,Currency,TheirRef,
		    Purpose,Attach,MemoInfo,type,CreateDate,updateTime,status,trading,sortTime)
			VALUES (#{userId},#{SubAcctNo},#{RqUID},#{BindCardNo},#{Amount},#{BizDate},#{Currency},
			    #{TheirRef},#{Purpose},#{Attach},#{MemoInfo},#{type},#{CreateDate},#{updateTime},#{status},#{trading},#{sortTime})
	</insert>

	<!--根据二类账户查询账单-->
	<select id="queryWithdraw" parameterType="Map" resultType="com.ulaiber.web.model.Bill">
		select x.* from (
			select a.SubAcctNo,a.amount,a.trading ,a.status as tradingStatus,a.CreateDate,a.updateTime,
				c.bankCardNo,d.name as bankName,a.RqUID,a.sortTime  from tbl_withdraw a
			    left join tbl_userToBank c on a.userid = c.userid
			    left join tbl_bindBank d on c.bankNo = d.bankNo
			    where a.SubAcctNo = #{SubAcctNo}
			union all
			select b.SubAcctNo,b.salaries as amount,b.trading ,b.status as tradingStatus,b.CreateDate,b.updateTime,null as bankCardNo ,
			    null as bankName,b.did as RqUID,null as sortTime from tbl_salaries_detail b
			    where b.SubAcctNo = #{SubAcctNo}
		) x ORDER BY x.sortTime DESC limit #{pageNum},#{pageSize}
	</select>

    <!--更新交易记录-->
    <update id="updateWithdraw" parameterType="Map">
        UPDATE tbl_withdraw SET status = ${status},updateTime = #{date},sortTime = #{sortTime}
         	WHERE RqUID = #{rqUID}
    </update>

	<!--根据流水号查询交易详情-->
	<select id="queryWithdrawByRqUID" parameterType="String" resultType="com.ulaiber.web.model.BillDetail">
		select b.user_name as username,a.RqUID,a.Amount,a.BindCardNo,a.CreateDate,a.updateTime,a.TheirRef as remark,
			 a.status as tradingStatus ,d.icon from tbl_withdraw a
			left join tbl_users b on a.userid = b.user_id
			left join tbl_userToBank c on a.userid = c.userid
			left join tbl_bindBank d on c.bankNo = d.bankNo
			where c.disabled = 0 and  a.RqUID =  #{rqUID}
	</select>

	<!--根据流水号查询工资转入详情-->
	<select id="querySalariesByRqUID" parameterType="String" resultType="com.ulaiber.web.model.BillDetail">
		select a.did as RqUID,a.userName as username,a.CreateDate ,a.updateTime,a.status as tradingStatus from tbl_salaries_detail a
 			left join tbl_salaries b on a.sid = b.sid where  a.did = #{rqUID}
	</select>

	<!--根据二类户账号获取CID-->
	<select id="queryCIdbySub" parameterType="String" resultType="Map">
		select b.CID,b.user_name from tbl_secondAccount a
			left join tbl_users b on a.userid = b.user_id
			where a.SubAcctNo = #{subAcctNo}
	</select>

	<!-- 更新二类户冻结状态-->
	<update id="updateAccFreeze" parameterType="String">
		UPDATE tbl_secondAccount SET freeze = '0' WHERE SubAcctNo = #{subAcctNo}
	</update>
</mapper>