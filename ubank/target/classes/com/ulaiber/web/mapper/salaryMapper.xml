<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	namespace：必须与对应的接口全类名一致
	id:必须与对应接口的某个对应的方法名一致
	
 -->
<mapper namespace="com.ulaiber.web.dao.SalaryDao">

    <resultMap id="SalaryMap" type="Salary" >
       	<id column="sid" property="sid" jdbcType="BIGINT" />
       	<result column="operate_user_id" property="operateUserId" jdbcType="BIGINT" />
    	<result column="operate_user_name" property="operateUserName" jdbcType="VARCHAR" />
    	<result column="company_id" property="companyId" jdbcType="VARCHAR" />
    	<result column="company_name" property="companyName" jdbcType="VARCHAR" />
    	<result column="total_number" property="totalNumber" jdbcType="INTEGER" />
    	<result column="total_amount" property="totalAmount" jdbcType="DOUBLE" />
    	<result column="salary_month" property="salaryMonth" jdbcType="VARCHAR" />
    	<result column="salary_date" property="salaryDate" jdbcType="VARCHAR" />
    	<result column="trans_date" property="transDate" jdbcType="VARCHAR" />
    	<result column="salary_createTime" property="salaryCreateTime" jdbcType="VARCHAR" />
    	<result column="approve_ids" property="approveIds" jdbcType="VARCHAR" />
    	<result column="approve_names" property="approveNames" jdbcType="VARCHAR" />
    	<result column="status" property="status" jdbcType="VARCHAR" />
    	<result column="entrustSeqNo" property="entrustSeqNo" jdbcType="VARCHAR" />
    	<result column="remark" property="remark" jdbcType="VARCHAR" />
   </resultMap>
  
   <insert id="save" parameterType="Salary" useGeneratedKeys="true" keyProperty="sid">
   		insert into tbl_salaries(sid, operate_user_id, operate_user_name, company_id, company_name, total_number, total_amount, salary_month, salary_date, salary_createTime,
   		approve_ids, approve_names, status, entrustSeqNo, remark) values (#{sid}, #{operateUserId}, #{operateUserName}, #{companyId}, #{companyName}, #{totalNumber}, 
   		#{totalAmount}, #{salaryMonth}, #{salaryDate}, #{salaryCreateTime}, #{approveIds}, #{approveNames}, #{status}, #{entrustSeqNo}, #{remark})
   </insert>
   
   <update id="update" parameterType="Salary">
   		update tbl_salaries set operate_user_id=#{operateUserId}, operate_user_name=#{operateUserName}, company_id=#{companyId}, company_name=#{companyName},
   		total_number=#{totalNumber}, total_amount=#{totalAmount}, salary_month=#{salaryMonth}, salary_date=#{salaryDate}, salary_createTime=#{salaryCreateTime},
   		approve_ids=#{approveIds}, approve_names=#{approveNames} where sid=#{sid}
   </update>
	
	<select id="getAllSalaries" resultMap="SalaryMap">
		select * from tbl_salaries
	</select>
	
	<select id="getTotalNum" resultType="Integer">
		select count(1) from tbl_salaries
	</select>
	
	<select id="getSalariesByUserId" parameterType="Map" resultType="Map">
		select s.salary_month,d.salaries from tbl_salaries s,tbl_salaries_detail d where s.sid = d.sid and d.userId=#{userId} 
		order by s.salary_month desc limit #{offset},#{limit}
	</select>
	
	<select id="getSalaries" parameterType="Map" resultMap="SalaryMap">
		select * from tbl_salaries 
		<if test="search != null and search != ''">
			where userName like concat('%',#{search},'%') or company like concat('%',#{search},'%')
		</if>
		order by salary_date desc limit #{offset},#{limit}
	</select>
	
	<select id="getSalaryBySid" parameterType="String" resultMap="SalaryMap">
		select * from tbl_salaries where sid=#{sid}
	</select>
	
	<update id="updateStatusBySeqNo" parameterType="Salary">
		update tbl_salaries set status=#{status},trans_date=#{transDate} where entrustSeqNo=#{entrustSeqNo}
	</update>
	
	<delete id="batchDeleteSalaries" parameterType="java.util.List">  
		delete from tbl_salaries where sid in
	    <foreach collection="list" index="index" item="item" open="(" separator="," close=")">   
	        #{item}   
	    </foreach>  
	</delete>
	
</mapper>